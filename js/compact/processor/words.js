let Words = {
    globalWords: [],
    words: [],
    wordCount: 0,
    wordLengths: [],
    syllables:[],
    breaths: [],
    local: {
        lengths: [],
        count: 0,
        words: [],
        syllables: 0,
        breaths: [],
    },
    reset: function(){
        // Set all global data to empty
        this.globalWords = [];
        this.words = [];
        this.wordCount = 0;
        this.wordLengths = [];
        this.syllables = [];
        this.breaths = [];
    },
    calculateBreathUnit: function(wordLength, syllableCount){
        //generalized method for breath units
        return (wordLength/syllableCount).toFixed(2);
    },
    updateLocalAndGlobal: function(length, words, syllables, breaths){

        //This generalizes adding global and local variables
        Words.local.lengths.push(length);
        //Pushes local words
        Words.local.words.push(words);
        //Increments total local syllables
        Words.local.syllables = Words.local.syllables + 1;
        //Pushes local breath units
        Words.local.breaths.push(breaths);

        //Add length to the global Words
        Words.wordLengths.push(length);
        //Add syllable counts to global Word Bank
        Words.syllables = Words.syllables + 1;
        //Add word to the global Words
        Words.globalWords.push(words);
        //Add breath unit to global Words
        Words.breaths.push(breaths);

        //Global word count is added at the end
    },
    resetLocal: function(){
        //Resets the local statistics
        Words.local.lengths = [];
        Words.local.count = 0;
        Words.local.words = [];
        Words.local.syllables = 0;
        Words.local.breaths = [];
    },
    processWords: function(sentence, caller){
        //remove all non-word characters
        sentence = sentence.replace(/[\W_]+/g," ");
        //Split words from sentence by spaces
        let words = sentence.split(" ");

        //Resets the local bank
        Words.resetLocal();
        //Initialize a wordCount variable
        let wordCount = 0;

        //Define a new Word Bank
        //let Bank = new Object;
        //Initailize empty arrays for word lengths, how many, and the words themselves
        //Bank.lengths = [];
        //Bank.count = 0;
        //Bank.words = [];
        //Bank.syllables = [];
        //Bank.breaths = [];



        //For each of the words generated by the split
        words.forEach(function(word){
              //Run throrough test on word to determine what action needs to happen
              let testResults = Interpreter.testWord(word);
              //calculate word length
              let wordLength = word.length;

              //Begin Decision Tree
              if((testResults.containsInterpretation == true)){
                  //Then the word is already known
                  console.log("Contains Interpretation: " + word);
                  wordCount = wordCount + 1;
                      //word.length stays the same
                      //syllables is counted on Interpreter.abstract[word]
                      //get breath unit
                      //save abstract as word
                      //increase word count by one

              }else if((testResults.containsInterpretation == false) && (testResults.containsNumber != true)){
                  //Then there is no interpretation
                  if((testResults.containsUnresolved == true)){
                      //If there is no intepretation a known unresolved word?
                      console.log("Contains Known Unresolved: " + word);
                      wordCount = wordCount + 1;
                      // length = 0
                      // syllables = 0
                      // breath = 0
                      // A callback will need to be added at the end
                  }
                  if((testResults.containsUnresolved == false) && (testResults.containsNumber != true)){
                      //If there is no unresolved, add top unresolved
                      console.log("Contains New Unresolved:" + word);
                      wordCount = wordCount + 1;
                      //Add word to unresolved
                      // length = 0
                      // syllables = 0
                      // breath = 0
                  }

              // Word undergroes regular process
              } else{
                    //Filters any additional whitespaces that made it through
                    // if containsNumber is true then the word DOES NOT HAVE a number
                    if((word.length > 0) && (testResults.containsNumber == true)){
                        //Increses the word count
                        wordCount = wordCount + 1;
                        //Counts the number of syllables
                        let syllableCount = getSyllableCount(word);
                        //Create breath unit variable
                        let breath = Words.calculateBreathUnit(wordLength, syllableCount);

                        Words.updateLocalAndGlobal(
                            wordLength,
                            word,
                            syllableCount,
                            breath
                        );
                        //Local Word Bank
                        //Bank.syllables.push(syllableCount);
                        //Add a copy of the word in the word Bank
                        //Bank.words.push(word);
                        //Add word lengths to the word Bank
                        //Bank.lengths.push(wordLength);
                        //Add breath units to local word Bank
                        //Bank.breaths.push(breath);

                        //Add syllable counts to global Word Bank
                        //Words.syllables.push(syllableCount);
                        //Add word to the global Words
                        //Words.globalWords.push(word);
                        //Add length to the global Words
                        //Words.wordLengths.push(wordLength);
                        //Add breath unit to global Words
                        //Words.breaths.push(breath);

                        //Push word into Document word bank
                        if(caller == "sentence"){
                              //Push words to Document word bank
                              Document.words.push(word);
                              //Push reference key to word
                              Document.wordKeys.push(createKey());
                        }
                  }
              }
        });
        //Add the number of words to the Bank
        Words.local.count = wordCount;
        //Bank.count = wordCount;
        //Push copy of word bank into global word bank
        Words.wordCount = wordCount;
        //Return Bank to Sentences
        return Words.local;
    },
}
